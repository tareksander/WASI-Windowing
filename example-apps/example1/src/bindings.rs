// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod wasi {
  pub mod windowing {
    
    #[allow(clippy::all)]
    pub mod window {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// A handle to a window.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Window{
        handle: wit_bindgen::rt::Resource<Window>,
      }
      
      impl Window{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Window{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:windowing/window")]
            extern "C" {
              #[link_name = "[resource-drop]window"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      pub type WindowId = u64;
      impl Window {
        #[allow(unused_unsafe, clippy::all)]
        /// Creates a new window, invisible and of implementation-defined size at an implementation-defined location.
        pub fn new() -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:windowing/window")]
            extern "C" {
              #[link_name = "[constructor]window"]
              fn wit_import() -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import() -> i32{ unreachable!() }
            let ret = wit_import();
            Window::from_handle(ret as u32)
          }
        }
      }
      impl Window {
        #[allow(unused_unsafe, clippy::all)]
        /// TODO Add methods to set window parameters and flags.
        /// Decide if the methods should return Option<> or false if they aren't supported on the platform, or if the
        /// capabilities should be queryable and the methods are no-ops or return None.
        /// Sets the visibility of the window.
        pub fn set_visible(&self,visible: bool,){
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:windowing/window")]
            extern "C" {
              #[link_name = "[method]window.set-visible"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, match visible { true => 1, false => 0 });
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod event {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      wit_bindgen::bitflags::bitflags! {
        #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
        pub struct MouseButtons: u8 {
          const LEFT = 1 << 0;
          const MIDDLE = 1 << 1;
          const RIGHT = 1 << 2;
        }
      }
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Cursor {
        pub x: u16,
        pub y: u16,
        pub buttons: MouseButtons,
      }
      impl ::core::fmt::Debug for Cursor {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Cursor").field("x", &self.x).field("y", &self.y).field("buttons", &self.buttons).finish()
        }
      }
      /// Describes the possible events regarding a window.
      #[derive(Clone, Copy)]
      pub enum Event{
        /// The user requested to close a window.
        Close,
        /// The user pressed a key that has a defined Unicode code point while a window was focused.
        /// TODO Are there keys without defined Unicode values? E.g. media buttons, F-keys? Compile a list of them and create the special-key enum and event.
        /// TODO Should repeat down events be emitted or should the application handle repeats itself if needed.
        /// TODO Key modifiers.
        KeyDown(u32),
        KeyUp(u32),
        /// TODO Should there be touch support? Or should implementations convert a tap to a click and a swipe to a move?
        /// Mouse click has occurred in a window.
        ClickDown(Cursor),
        ClickUp(Cursor),
        /// The cursor was moved inside a window.
        Move(Cursor),
      }
      impl ::core::fmt::Debug for Event {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Event::Close => {
              f.debug_tuple("Event::Close").finish()
            }
            Event::KeyDown(e) => {
              f.debug_tuple("Event::KeyDown").field(e).finish()
            }
            Event::KeyUp(e) => {
              f.debug_tuple("Event::KeyUp").field(e).finish()
            }
            Event::ClickDown(e) => {
              f.debug_tuple("Event::ClickDown").field(e).finish()
            }
            Event::ClickUp(e) => {
              f.debug_tuple("Event::ClickUp").field(e).finish()
            }
            Event::Move(e) => {
              f.debug_tuple("Event::Move").field(e).finish()
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod wasi {
    pub mod windowing {
      
      #[allow(clippy::all)]
      pub mod event_handler {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Event = super::super::super::super::wasi::windowing::event::Event;
        pub type WindowId = super::super::super::super::wasi::windowing::window::WindowId;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "wasi:windowing/event-handler#event-handler"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_event_handler(arg0: i64,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            use super::super::super::super::wasi::windowing::event::Event as V0;
            let v0 = match arg1 {
              0 => {
                V0::Close
              }
              1 => {
                let e0 = arg2 as u32;
                V0::KeyDown(e0)
              }
              2 => {
                let e0 = arg2 as u32;
                V0::KeyUp(e0)
              }
              3 => {
                let e0 = super::super::super::super::wasi::windowing::event::Cursor{
                  x: arg2 as u16,
                  y: arg3 as u16,
                  buttons: super::super::super::super::wasi::windowing::event::MouseButtons::empty() | super::super::super::super::wasi::windowing::event::MouseButtons::from_bits_retain(((arg4 as u8) << 0) as _),
                };
                V0::ClickDown(e0)
              }
              4 => {
                let e0 = super::super::super::super::wasi::windowing::event::Cursor{
                  x: arg2 as u16,
                  y: arg3 as u16,
                  buttons: super::super::super::super::wasi::windowing::event::MouseButtons::empty() | super::super::super::super::wasi::windowing::event::MouseButtons::from_bits_retain(((arg4 as u8) << 0) as _),
                };
                V0::ClickUp(e0)
              }
              n => {
                debug_assert_eq!(n, 5, "invalid enum discriminant");
                let e0 = super::super::super::super::wasi::windowing::event::Cursor{
                  x: arg2 as u16,
                  y: arg3 as u16,
                  buttons: super::super::super::super::wasi::windowing::event::MouseButtons::empty() | super::super::super::super::wasi::windowing::event::MouseButtons::from_bits_retain(((arg4 as u8) << 0) as _),
                };
                V0::Move(e0)
              }
            };
            <_GuestImpl as Guest>::event_handler(arg0 as u64, v0);
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn event_handler(window_id: WindowId,event: Event,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 673] = [3, 0, 7, 101, 120, 97, 109, 112, 108, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 163, 4, 1, 65, 2, 1, 65, 11, 1, 66, 9, 4, 0, 6, 119, 105, 110, 100, 111, 119, 3, 1, 1, 119, 4, 0, 9, 119, 105, 110, 100, 111, 119, 45, 105, 100, 3, 0, 1, 1, 105, 0, 1, 64, 0, 0, 3, 4, 0, 19, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 105, 110, 100, 111, 119, 1, 4, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 5, 7, 118, 105, 115, 105, 98, 108, 101, 127, 1, 0, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 119, 105, 110, 100, 111, 119, 46, 115, 101, 116, 45, 118, 105, 115, 105, 98, 108, 101, 1, 6, 3, 1, 21, 119, 97, 115, 105, 58, 119, 105, 110, 100, 111, 119, 105, 110, 103, 47, 119, 105, 110, 100, 111, 119, 5, 0, 2, 3, 0, 0, 6, 119, 105, 110, 100, 111, 119, 1, 66, 8, 2, 3, 2, 1, 1, 4, 0, 6, 119, 105, 110, 100, 111, 119, 3, 0, 0, 1, 110, 3, 4, 108, 101, 102, 116, 6, 109, 105, 100, 100, 108, 101, 5, 114, 105, 103, 104, 116, 4, 0, 13, 109, 111, 117, 115, 101, 45, 98, 117, 116, 116, 111, 110, 115, 3, 0, 2, 1, 114, 3, 1, 120, 123, 1, 121, 123, 7, 98, 117, 116, 116, 111, 110, 115, 3, 4, 0, 6, 99, 117, 114, 115, 111, 114, 3, 0, 4, 1, 113, 6, 5, 99, 108, 111, 115, 101, 0, 0, 8, 107, 101, 121, 45, 100, 111, 119, 110, 1, 121, 0, 6, 107, 101, 121, 45, 117, 112, 1, 121, 0, 10, 99, 108, 105, 99, 107, 45, 100, 111, 119, 110, 1, 5, 0, 8, 99, 108, 105, 99, 107, 45, 117, 112, 1, 5, 0, 4, 109, 111, 118, 101, 1, 5, 0, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 6, 3, 1, 20, 119, 97, 115, 105, 58, 119, 105, 110, 100, 111, 119, 105, 110, 103, 47, 101, 118, 101, 110, 116, 5, 2, 2, 3, 0, 1, 5, 101, 118, 101, 110, 116, 3, 0, 5, 101, 118, 101, 110, 116, 3, 0, 3, 2, 3, 0, 0, 9, 119, 105, 110, 100, 111, 119, 45, 105, 100, 3, 0, 9, 119, 105, 110, 100, 111, 119, 45, 105, 100, 3, 0, 5, 1, 66, 6, 2, 3, 2, 1, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 9, 119, 105, 110, 100, 111, 119, 45, 105, 100, 3, 0, 2, 1, 64, 2, 9, 119, 105, 110, 100, 111, 119, 45, 105, 100, 3, 5, 101, 118, 101, 110, 116, 1, 1, 0, 4, 0, 13, 101, 118, 101, 110, 116, 45, 104, 97, 110, 100, 108, 101, 114, 1, 4, 4, 1, 28, 119, 97, 115, 105, 58, 119, 105, 110, 100, 111, 119, 105, 110, 103, 47, 101, 118, 101, 110, 116, 45, 104, 97, 110, 100, 108, 101, 114, 5, 7, 4, 1, 26, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 101, 120, 97, 109, 112, 108, 101, 49, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
