
package wasi:windowing;


/// Defines the event type and the event-handler function type.
interface event {
    
    
    enum mouse-button {
        left,
        middle,
        right,
    }
    
    use window.window;
    
    /// Describes the possible events regarding a window.
    variant event {
        /// The user requested to close a window.
        close(),
        /// The user pressed a key that has a defined Unicode code point while a window was focused.
        // TODO Are there keys without defined Unicode values? E.g. media buttons, F-keys? Compile a list of them and create the special-key enum and event.
        // TODO Should repeat down events be emitted or should the application handle repeats itself if needed.
        // TODO Key modifiers.
        key-down(u32),
        key-up(u32),
        // TODO Should there be touch support? Or should implementations convert a tap to a click and a swipe to a move?
        /// Mouse click has occurred in a window.
        click-down(button(mouse-button), x(u16), y(u16))
        click-up(button(mouse-button), x(u16), y(u16))
        /// The cursor was moved inside a window.
        move(x(u16), y(u16))
        
        // TODO Represent scroll events
        
        
    }
    
    /// The application must implement this handler function that handles events on all windows it creates.
    event-handler: func(window: window, event: event);
    
    
}









